<mxfile host="app.diagrams.net" modified="2020-11-21T12:02:54.315Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36" etag="hdcfzYh_r9VdFgDUx8MR" version="13.10.0" type="github">
  <diagram id="8sb3Bw6IxuCxyVAl2Eib" name="Page-1">
    <mxGraphModel dx="1105" dy="437" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="_EVcE_OySbLcWITSbfoF-1" value="&lt;div&gt;pilot/pkg/bootstrap/servicecontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) initServiceControllers(args *PilotArgs) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; serviceControllers := s.ServiceController()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // 1. 类型kubenetes registry&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; s.initKubeRegistry(serviceControllers, args)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;// 2. 类型serviceEntry registry&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.serviceEntryStore = serviceentry.NewServiceDiscovery(s.configController,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; s.environment.IstioConfigStore, s.XDSServer)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; serviceControllers.AddRegistry(s.serviceEntryStore)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.kubeRegistry.AppendWorkloadHandler(s.serviceEntryStore.WorkloadInstanceHandler)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; s.serviceEntryStore.AppendWorkloadHandler(s.kubeRegistry.WorkloadInstanceHandler)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.addStartFunc(func(stop &amp;lt;-chan struct{}) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go serviceControllers.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return nil&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="100" y="190" width="550" height="350" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-2" value="&lt;div&gt;pilot/pkg/bootstrap/servicecontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) initKubeRegistry(serviceControllers *aggregate.Controller, args *PilotArgs) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; kubeRegistry := kubecontroller.NewController(s.kubeClient, args.RegistryOptions.KubeOptions)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.kubeRegistry = kubeRegistry&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; serviceControllers.AddRegistry(kubeRegistry)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="720" y="270" width="530" height="120" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-3" value="&lt;div&gt;// pilot/pkg/serviceregistry/kube/contoller/controller.go&lt;/div&gt;&lt;div&gt;func NewController(kubeClient kubelib.Client, options Options) *Controller {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c := &amp;amp;Controller{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; client:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kubeClient.Kube(),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; queue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.NewQueue(1 * time.Second),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; xdsUpdater:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; options.XDSUpdater,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.nsInformer = informers.NewSharedInformerFactoryWithOptions(c.client, options.ResyncPeriod,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ).Core().V1().Namespaces().Informer()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.nsInformer, c.queue, &quot;Namespaces&quot;, c.onNamespaceEvent, nil)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.serviceInformer = kubeClient.KubeInformer().Core().V1().Services().Informer()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.serviceLister = kubeClient.KubeInformer().Core().V1().Services().Lister()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.serviceInformer, c.queue, &quot;Services&quot;, c.onServiceEvent, nil)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.endpoints = newEndpointsController(c, kubeClient.KubeInformer().Core().V1().Endpoints())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.endpoints = newEndpointSliceController(c,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kubeClient.KubeInformer().Discovery().V1beta1().EndpointSlices())&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.nodeInformer = kubeClient.KubeInformer().Core().V1().Nodes().Informer()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.nodeLister = kubeClient.KubeInformer().Core().V1().Nodes().Lister()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.nodeInformer, c.queue, &quot;Nodes&quot;, c.onNodeEvent, nil)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.pods = newPodCache(c, kubeClient.KubeInformer().Core().V1().Pods(), func(key string) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; item, exists, err := c.endpoints.getInformer().GetStore().GetByKey(key)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; c.queue.Push(func() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return c.endpoints.onEvent(item, model.EventUpdate)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.pods.informer, c.queue, &quot;Pods&quot;, c.pods.onEvent, nil)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="1330" y="80" width="640" height="510" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-4" value="&lt;div&gt;// pilot/pkg/serviceregistry/kube/controller/controller.go&lt;/div&gt;&lt;div&gt;// handler is onEvent&lt;/div&gt;&lt;div&gt;func registerHandlers(informer cache.SharedIndexInformer, q queue.Instance, otype string,&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;handler func(interface{}, model.Event)) {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; wrappedHandler := func(obj interface{}, event model.Event) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; obj = tryGetLatestObject(informer, obj)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return handler(obj, event)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; informer.AddEventHandler(&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; cache.ResourceEventHandlerFuncs{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; AddFunc: func(obj interface{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; incrementEvent(otype, &quot;add&quot;)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; q.Push(func()&amp;nbsp; {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return wrappedHandler(obj, model.EventAdd)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;})&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; })&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="2000" y="80" width="500" height="300" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-5" value="&lt;div&gt;//pilot/pkg/serviceregistry/kube/controller/controller.go&lt;/div&gt;&lt;div&gt;func (c *Controller) onServiceEvent(curr interface{}, event model.Event) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; svc, ok := curr.(*v1.Service)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; svcConv := kube.ConvertService(*svc, c.domainSuffix, c.clusterID)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.extractGatewaysFromService(svcConv)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; instances := kube.ExternalNameServiceInstances(svc, svcConv)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.servicesMap[svcConv.Hostname] = svcConv&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.externalNameSvcInstanceMap[svcConv.Hostname] = instances&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; endpoints := c.endpoints.buildIstioEndpointsWithService(svc.Name, svc.Namespace,&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; svcConv.Hostname)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.xdsUpdater.EDSCacheUpdate(c.clusterID, string(svcConv.Hostname), svc.Namespace,&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; endpoints)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.xdsUpdater.SvcUpdate(c.clusterID, string(svcConv.Hostname), svc.Namespace, event)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; for _, f := range c.serviceHandlers {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; f(svcConv, event)&amp;nbsp; // initRegistryEventHandlers-&amp;gt;AppendServiceHandler&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="2000" y="440" width="520" height="330" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-6" value="&lt;div&gt;// pilot/pkg/bootstrap/servicecontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) ServiceController() *aggregate.Controller {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return s.environment.ServiceDiscovery.(*aggregate.Controller)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="720" y="80" width="520" height="60" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-7" value="&lt;div&gt;//pilot/pkg/serviceregistry/serviceentry/servicediscovery.go&lt;/div&gt;&lt;div&gt;type ServiceEntryStore struct {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; XdsUpdater model.XDSUpdater&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; store&amp;nbsp; &amp;nbsp; &amp;nbsp; model.IstioConfigStore&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; ip2instance map[string][]*model.ServiceInstance&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; instances map[instancesKey]map[configKey][]*model.ServiceInstance&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; workloadInstancesByIP map[string]*model.WorkloadInstance&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; workloadInstancesIPsByName map[string]string&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; seWithSelectorByNamespace map[string][]servicesWithEntry&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; workloadHandlers&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; []func(*model.WorkloadInstance, model.Event)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;func NewServiceDiscovery(configController model.ConfigStoreCache, store model.IstioConfigStore,&amp;nbsp;&lt;/div&gt;&lt;div&gt;xdsUpdater model.XDSUpdater) *ServiceEntryStore {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s := &amp;amp;ServiceEntryStore{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;XdsUpdater:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;xdsUpdater,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;store:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; store,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ip2instance:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; map[string][]*model.ServiceInstance{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;instances:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; map[instancesKey]map[configKey][]*model.ServiceInstance{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;workloadInstancesByIP:&amp;nbsp; &amp;nbsp; &amp;nbsp; map[string]*model.WorkloadInstance{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;workloadInstancesIPsByName: map[string]string{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; refreshIndexes:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;atomic.NewBool(true),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; configController.RegisterEventHandler(gvk.ServiceEntry, s.serviceEntryHandler)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; configController.RegisterEventHandler(gvk.WorkloadEntry, s.workloadEntryHandler)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="720" y="420" width="550" height="440" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-8" value="&lt;div&gt;// pilot/pkg/serviceregistry/aggregate/controller.go&lt;/div&gt;&lt;div&gt;func (c *Controller) AddRegistry(registry serviceregistry.Instance) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; registries := c.registries&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; registries = append(registries, registry)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; c.registries = registries&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="720" y="160" width="520" height="90" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-9" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" target="_EVcE_OySbLcWITSbfoF-6">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="610" y="190" as="sourcePoint" />
            <mxPoint x="660" y="140" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-10" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.75;entryDx=0;entryDy=0;" edge="1" parent="1" target="_EVcE_OySbLcWITSbfoF-8">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="650" y="280" as="sourcePoint" />
            <mxPoint x="700" y="230" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-11" value="" style="endArrow=classic;html=1;entryX=-0.003;entryY=0.344;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" target="_EVcE_OySbLcWITSbfoF-2">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="650" y="370" as="sourcePoint" />
            <mxPoint x="700" y="320" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-12" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="650" y="500" as="sourcePoint" />
            <mxPoint x="719" y="468" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-13" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1250" y="330" as="sourcePoint" />
            <mxPoint x="1330" y="240" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-14" value="" style="endArrow=classic;html=1;entryX=0.031;entryY=0.042;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" target="_EVcE_OySbLcWITSbfoF-4">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1960" y="120" as="sourcePoint" />
            <mxPoint x="2010" y="70" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-15" value="" style="endArrow=classic;html=1;entryX=0.069;entryY=0.006;entryDx=0;entryDy=0;entryPerimeter=0;exitX=1.003;exitY=0.681;exitDx=0;exitDy=0;exitPerimeter=0;" edge="1" parent="1" source="_EVcE_OySbLcWITSbfoF-3" target="_EVcE_OySbLcWITSbfoF-5">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1980" y="440" as="sourcePoint" />
            <mxPoint x="2030" y="390" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-16" value="&lt;div&gt;// pilot/pkg/serviceregistry/aggregate/controller.go&lt;/div&gt;&lt;div&gt;func (c *Controller) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, r := range c.GetRegistries() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go r.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="120" y="580" width="300" height="100" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-17" value="&lt;div&gt;// pilot/pkg/serviceregistry/kube/controller/controller.go&lt;/div&gt;&lt;div&gt;func (c *Controller) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; c.networksWatcher.AddNetworksHandler(c.reloadNetworkLookup)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; c.reloadNetworkLookup()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp;go c.nsInformer.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp;c.queue.Run(stop)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="120" y="720" width="450" height="120" as="geometry" />
        </mxCell>
        <mxCell id="_EVcE_OySbLcWITSbfoF-18" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="280" y="680" as="sourcePoint" />
            <mxPoint x="280" y="720" as="targetPoint" />
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
