<mxfile host="app.diagrams.net" modified="2020-11-21T03:38:35.910Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36" etag="TCKmj_8oLoBaKBG_CBhz" version="13.10.0" type="github">
  <diagram id="6TW5W0XCIM6I71bb3Syc" name="Page-1">
    <mxGraphModel dx="1849" dy="380" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="kg50LUV-51LIkfejvlK1-2" value="&lt;div&gt;pilot/pkg/bootstrap/configcontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) initConfigController(args *PilotArgs) {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; s.initK8SConfigStore(args)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; aggregateConfigController, err := configaggregate.MakeCache(s.ConfigStores)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.configController = aggregateConfigController&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.environment.IstioConfigStore = model.MakeIstioStore(s.configController)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.addStartFunc(func(stop &amp;lt;-chan struct{}) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go s.configController.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return nil&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;})&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="40" y="150" width="490" height="260" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-3" value="pilot/pkg/bootstrap/configcontroller.go&lt;br&gt;// ConfigStores 存储configcontroller&lt;br&gt;&lt;div&gt;func (s *Server) initK8SConfigStore(args *PilotArgs) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; configController = s.makeKubeConfigController(args)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // server中ConfigStores就是ConfigStoreCache类型&lt;/div&gt;&amp;nbsp; &amp;nbsp; // ConfigStores&amp;nbsp; &amp;nbsp; &amp;nbsp; []model.ConfigStoreCache&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.ConfigStores = append(s.ConfigStores, configController)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.initStatusController(args, features.EnableStatus)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.XDSServer.InternalGen.Store = configController&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="600" y="150" width="440" height="160" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-4" value="&lt;div&gt;pilot/pkg/config/aggregate/config.go&lt;/div&gt;&lt;div&gt;func MakeCache(caches []model.ConfigStoreCache) model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return MakeWriteableCache(caches, nil)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;func MakeWriteableCache(caches []model.ConfigStoreCache, writer model.ConfigStore)&amp;nbsp;&lt;/div&gt;&lt;div&gt;model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; stores := make([]model.ConfigStore, 0, len(caches))&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, cache := range caches {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;stores = append(stores, cache)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; store, err := makeStore(stores, writer)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return &amp;amp;storeCache{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ConfigStore: store,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; caches:&amp;nbsp; &amp;nbsp; &amp;nbsp; caches,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="600" y="320" width="490" height="280" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-5" value="&lt;div&gt;pilot/pkg/bootstrap/configcontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) makeKubeConfigController(args *PilotArgs) model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; c = crdclient.New(s.kubeClient, buildLedger(args.RegistryOptions), args.Revision, args.RegistryOptions.KubeOptions)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="70" y="30" width="650" height="100" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-6" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.25;entryDx=0;entryDy=0;exitX=1;exitY=0.25;exitDx=0;exitDy=0;" parent="1" source="kg50LUV-51LIkfejvlK1-2" target="kg50LUV-51LIkfejvlK1-3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="530" y="250" as="sourcePoint" />
            <mxPoint x="580" y="200" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-7" value="" style="endArrow=classic;html=1;entryX=1;entryY=0.75;entryDx=0;entryDy=0;" parent="1" target="kg50LUV-51LIkfejvlK1-5" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="777" y="150" as="sourcePoint" />
            <mxPoint x="827" y="100" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-8" value="" style="endArrow=classic;html=1;entryX=0.05;entryY=0.017;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="kg50LUV-51LIkfejvlK1-4" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="530" y="257" as="sourcePoint" />
            <mxPoint x="620" y="320" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-9" value="pilot/pkg/model/config.go&lt;br&gt;// configcontroller需要实现ConfigStore的接口，如Get, List, Create, Update, Delete 等&lt;br&gt;&lt;div&gt;func MakeIstioStore(store ConfigStore) IstioConfigStore {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return &amp;amp;istioConfigStore{store}&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;type istioConfigStore struct {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; ConfigStore&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;type IstioConfigStore interface {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; ConfigStore&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; ServiceEntries() []config.Config&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; Gateways(workloadLabels labels.Collection) []config.Config&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; AuthorizationPolicies(namespace string) []config.Config&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;type ConfigStore interface {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; Get(typ config.GroupVersionKind, name, namespace string) *config.Config&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; List(typ config.GroupVersionKind, namespace string) []config.Config&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; Create(config config.Config) revision string&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; Update(config config.Config) newRevision string&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; Delete(typ config.GroupVersionKind, name, namespace string)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="80" y="460" width="510" height="360" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-10" value="" style="endArrow=classic;html=1;entryX=0.911;entryY=0.01;entryDx=0;entryDy=0;entryPerimeter=0;exitX=1;exitY=0.6;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="kg50LUV-51LIkfejvlK1-2" target="kg50LUV-51LIkfejvlK1-9" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="530" y="372" as="sourcePoint" />
            <mxPoint x="544" y="453" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-11" value="&lt;div&gt;pilot/pkg/model/config.go&lt;/div&gt;&lt;div&gt;// configcontroller 需要实现Get List Update Delete&lt;/div&gt;&lt;div&gt;// 和RegisterEventHandler, 和Run&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;type ConfigStoreCache interface {&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;ConfigStore&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;RegisterEventHandler(kind config.GroupVersionKind&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; , handler func(config.Config, config.Config, Event))&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;Run(stop &amp;lt;-chan struct{})&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1080" y="60" width="310" height="220" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-13" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.25;entryDx=0;entryDy=0;" parent="1" target="kg50LUV-51LIkfejvlK1-11" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1020" y="150" as="sourcePoint" />
            <mxPoint x="1030" y="160" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-14" value="&lt;div&gt;// pilot/pkg/config/aggregate/config.go&lt;/div&gt;&lt;div&gt;&lt;div&gt;type storeCache struct {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; model.ConfigStore&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; caches []model.ConfigStoreCache&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;func (cr *storeCache) RegisterEventHandler(kind config.GroupVersionKind, handler func(config.Config, config.Config, model.Event)) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, cache := range cr.caches {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if _, exists := cache.Schemas().FindByGroupVersionKind(kind); exists {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.RegisterEventHandler(kind, handler)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;func (cr *storeCache) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, cache := range cr.caches {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go cache.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;lt;-stop&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="40" y="840" width="720" height="300" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-15" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.1;entryDx=0;entryDy=0;entryPerimeter=0;exitX=0.001;exitY=0.887;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="kg50LUV-51LIkfejvlK1-2" target="kg50LUV-51LIkfejvlK1-14" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="10" y="650" as="sourcePoint" />
            <mxPoint x="60" y="600" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-16" value="&lt;div&gt;pilot/pkg/config/kube/crdclient/client.go&lt;/div&gt;&lt;div&gt;func (cl *Client) RegisterEventHandler(kind config.GroupVersionKind, handler func(config.Config, config.Config, model.Event)) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; h, exists := cl.kinds[kind]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; h.handlers = append(h.handlers, handler)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;func (cl *Client) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; go func() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.WaitForCacheSync(stop, cl.HasSynced)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scope.Infoa(&quot;Pilot K8S CRD controller synced &quot;, time.Since(t0))&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cl.queue.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;lt;-stop&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="820" y="840" width="520" height="260" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-17" value="&lt;div&gt;pilot/pkg/config/kube/crdclient/client.go&lt;/div&gt;&lt;div&gt;func New(client kube.Client, configLedger ledger.Ledger, revision string&lt;/div&gt;&lt;div&gt;, options controller2.Options) model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; out := &amp;amp;Client{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.NewQueue(1 * time.Second),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; known := knownCRDs(client.Ext())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, s := range out.schemas.All() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; name := fmt.Sprintf(&quot;%s.%s&quot;, s.Resource().Plural(), s.Resource().Group())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if _, f := known[name]; f {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var i informers.GenericInformer&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if s.Resource().Group() == &quot;networking.x-k8s.io&quot; {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; i = client.ServiceApisInformer().ForResource(s.Resource().GroupVersionResource())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; i = client.IstioInformer().ForResource(s.Resource().GroupVersionResource())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; out.kinds[s.Resource().GroupVersionKind()] = createCacheHandler(out, s, i)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1100" y="480" width="520" height="320" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-18" value="&lt;div&gt;pilot/pkg/config/kube/crdclient/client.go&lt;/div&gt;&lt;div&gt;func knownCRDs(crdClient apiextensionsclient.Interface) map[string]struct{} {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; var res *v1beta1.CustomResourceDefinitionList&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; res = crdClient.ApiextensionsV1beta1().CustomResourceDefinitions().List(context.TODO(),metav1.ListOptions{})&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; mp := map[string]struct{}{}&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, r := range res.Items {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mp[r.Name] = struct{}{}&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return mp&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1700" y="320" width="640" height="210" as="geometry" />
        </mxCell>
        <mxCell id="kg50LUV-51LIkfejvlK1-19" value="&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pilot/pkg/config/kube/crdclient/cache_handler.go&lt;/div&gt;&lt;div&gt;type cacheHandler struct {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;client&amp;nbsp; &amp;nbsp;*Client&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;i&amp;nbsp; &amp;nbsp; nformer cache.SharedIndexInformer&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; handlers []func(config.Config, config.Config, model.Event)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; schema&amp;nbsp; &amp;nbsp;collection.Schema&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; lister&amp;nbsp; &amp;nbsp;func(namespace string) cache.GenericNamespaceLister&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;func (h *cacheHandler) onEvent(old interface{}, curr interface{}, event model.Event) {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; currItem, ok := curr.(runtime.Object)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; currConfig := *TranslateObject(currItem, h.schema.Resource().GroupVersionKind()&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , h.client.domainSuffix)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; var oldConfig config.Config&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; for _, f := range h.handlers {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; f(oldConfig, currConfig, event)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;func createCacheHandler(cl *Client, schema collection.Schema, i informers.GenericInformer)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;*cacheHandler {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;h := &amp;amp;cacheHandler{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;client:&amp;nbsp; &amp;nbsp;cl,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;schema:&amp;nbsp; &amp;nbsp;schema,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;informer: i.Informer(),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; kind := schema.Resource().Kind()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; i.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AddFunc: func(obj interface{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; incrementEvent(kind, &quot;add&quot;)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cl.tryLedgerPut(obj, kind)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cl.queue.Push(func() error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return h.onEvent(nil, obj, model.EventAdd)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; return h&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1760" y="550" width="580" height="600" as="geometry" />
        </mxCell>
        <mxCell id="qTVxL_Bb3orAZyixYXDo-1" value="&lt;div&gt;pilot/pkg/bootstrap/server.go&lt;/div&gt;&lt;div&gt;func (s *Server) initRegistryEventHandlers() error {&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;serviceHandler := func(svc *model.Service, _ model.Event) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;pushReq := &amp;amp;model.PushRequest{&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;Full: true,&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;ConfigsUpdated: map[model.ConfigKey]struct{}{{&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &lt;/span&gt;Kind:&amp;nbsp; &amp;nbsp; &amp;nbsp; gvk.ServiceEntry,&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &lt;/span&gt;Name:&amp;nbsp; &amp;nbsp; &amp;nbsp; string(svc.Hostname),&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &lt;/span&gt;Namespace: svc.Attributes.Namespace,&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;}: {}},&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;Reason: []model.TriggerReason{model.ServiceUpdate},&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;s.XDSServer.ConfigUpdate(pushReq)&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;s.ServiceController().AppendServiceHandler(serviceHandler)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; configHandler := func(_, curr config.Config, event model.Event) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;pushReq := &amp;amp;model.PushRequest{&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;Full: true,&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;ConfigsUpdated: map[model.ConfigKey]struct{}{{&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &lt;/span&gt;Kind:&amp;nbsp; &amp;nbsp; &amp;nbsp; curr.GroupVersionKind,&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &lt;/span&gt;Name:&amp;nbsp; &amp;nbsp; &amp;nbsp; curr.Name,&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &lt;/span&gt;Namespace: curr.Namespace,&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;}: {}},&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;Reason: []model.TriggerReason{model.ConfigUpdate},&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;s.XDSServer.ConfigUpdate(pushReq)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;}&amp;nbsp; &amp;nbsp;// 每一种config controller都会执行RegisterEventHandler，将configHandler注册到本地的eventhandler&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;s.configController.RegisterEventHandler(schema.Resource().GroupVersionKind(), configHandler)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-690" y="660" width="680" height="480" as="geometry" />
        </mxCell>
        <mxCell id="qTVxL_Bb3orAZyixYXDo-2" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.3;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="kg50LUV-51LIkfejvlK1-19" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1620" y="730" as="sourcePoint" />
            <mxPoint x="1700" y="730" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="qTVxL_Bb3orAZyixYXDo-3" value="" style="endArrow=classic;html=1;entryX=-0.006;entryY=0.667;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="kg50LUV-51LIkfejvlK1-18" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1620" y="540" as="sourcePoint" />
            <mxPoint x="1670" y="490" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="qTVxL_Bb3orAZyixYXDo-4" value="infomer 会将OnEvent&lt;br&gt;（带有handler）push&lt;br&gt;到queue&lt;br&gt;在queue中会调用&lt;br&gt;OnEvent函数" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;" parent="1" vertex="1">
          <mxGeometry x="1620" y="740" width="130" height="80" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
