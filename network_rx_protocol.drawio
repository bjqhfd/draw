<mxfile host="app.diagrams.net" modified="2021-01-14T03:19:22.730Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36" etag="ANV2Xa4bIxoHm-qtKZuO" version="14.1.9" type="github">
  <diagram id="fZlRgXpZP35zAibEW_lQ" name="Page-1">
    <mxGraphModel dx="1449" dy="643" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="tzcgp5JtMaqGH4jP-flQ-7" value="Linux网络设备子系统" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="80" y="40" width="150" height="50" as="geometry" />
        </mxCell>
        <mxCell id="tzcgp5JtMaqGH4jP-flQ-8" value="&lt;h3&gt;网络设备子系统的初始化&lt;/h3&gt;&lt;div&gt;网络设备（netdev）的初始化在net_dev_init&lt;/div&gt;&lt;div&gt;net_dev_init为每个CPU创建一个struct softnet_data变量。&lt;/div&gt;&lt;div&gt;这些变量包含一些 指向重要信息的指针：&lt;/div&gt;&lt;div&gt;1. 需要注册到这个 CPU 的 NAPI 变量列表&lt;/div&gt;&lt;div&gt;2. 数据处理 backlog&lt;/div&gt;&lt;div&gt;3. 处理权重&lt;/div&gt;&lt;div&gt;4. receive offload 变量列表&lt;/div&gt;&lt;div&gt;5. receive packet steering 设置&lt;/div&gt;&lt;div&gt;SoftIRQ Handler初始化&lt;/div&gt;&lt;div&gt;net_dev_init分别为接收和发送数据注册了一个软中断处理函数&lt;/div&gt;&lt;div&gt;static int __init net_dev_init(void)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;h4&gt;&amp;nbsp; open_softirq(NET_TX_SOFTIRQ, net_tx_action);&lt;br&gt;&amp;nbsp; open_softirq(NET_RX_SOFTIRQ, net_rx_action);&lt;/h4&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="360" y="20" width="430" height="260" as="geometry" />
        </mxCell>
        <mxCell id="tzcgp5JtMaqGH4jP-flQ-9" value="&lt;h3&gt;数据来了&lt;/h3&gt;&lt;div&gt;如果RX队列有足够的描述符（descriptors）,包会通过DMA写到RAM。&lt;/div&gt;&lt;div&gt;设备然后发起对应于它的中断（或者在MSI-X的场景,中断和包达到的RX队列绑定）&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="30" y="515" width="270" height="140" as="geometry" />
        </mxCell>
        <mxCell id="tzcgp5JtMaqGH4jP-flQ-10" value="" style="endArrow=classic;html=1;entryX=-0.004;entryY=0.177;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="tzcgp5JtMaqGH4jP-flQ-8" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="230" y="64.5" as="sourcePoint" />
            <mxPoint x="310" y="64.5" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="YTzWB60EVm3kckp8Hosf-1" value="&lt;h3&gt;中断处理函数&lt;/h3&gt;&lt;div&gt;中断处理函数应该将尽可能多的处理逻辑移出（到软中断）, 发起一个中断后，其他的中断就会被屏蔽&lt;/div&gt;&lt;div&gt;static irqreturn_t igb_msix_ring(int irq, void *data)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;&amp;nbsp; struct igb_q_vector *q_vector = data;&lt;/div&gt;&lt;div&gt;&amp;nbsp; /* Write the ITR value calculated from the previous interrupt. */&lt;/div&gt;&lt;div&gt;&amp;nbsp; igb_write_itr(q_vector);&lt;/div&gt;&lt;div&gt;&amp;nbsp; napi_schedule(&amp;amp;q_vector-&amp;gt;napi);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return IRQ_HANDLED;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;首先，它调用igb_write_itr更新一个硬件寄存器。对这个例子，这个寄存器是记录硬件 中断频率的。&lt;/div&gt;&lt;div&gt;这个寄存器和一个叫 “Interrupt Throttling”（也叫 “Interrupt Coalescing”）的硬件特性相关，这个特性可以平滑传送到 CPU 的中断数量。&lt;/div&gt;&lt;div&gt;第二，触发 napi_schedule，如果NAPI的处理循环还没开始的话，这会唤醒它。注意，这个处理循环是在软中断中执行的，而不是硬中断。&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="360" y="320" width="810" height="270" as="geometry" />
        </mxCell>
        <mxCell id="YTzWB60EVm3kckp8Hosf-2" value="&lt;h3&gt;NAPI 和 napi_schedule&lt;/h3&gt;&lt;div&gt;NAPI存在的意义是无需硬件中断通知就可以接收网络数据。NAPI的轮询循环（poll loop）是受硬件中断触发而跑起来的。&lt;/div&gt;&lt;div&gt;NAPI 功能启用了, 但是默认是没有工作的,直到第一个包到达的时候，网卡触发的一个硬件将它唤醒。&lt;/div&gt;&lt;div&gt;NAPI 功能也会被关闭，直到下一个硬中断再次将它唤起。&lt;/div&gt;&lt;div&gt;napi_schedule调用 __napi_schedule&lt;/div&gt;&lt;div&gt;void __napi_schedule(struct napi_struct *n)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;&amp;nbsp; unsigned long flags;&lt;/div&gt;&lt;div&gt;&amp;nbsp; local_irq_save(flags);&lt;/div&gt;&lt;div&gt;&amp;nbsp; ____napi_schedule(&amp;amp;__get_cpu_var(softnet_data), n);&lt;/div&gt;&lt;div&gt;&amp;nbsp; local_irq_restore(flags);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;__get_cpu_var 用于获取属于这个CPU的structure softnet_data 变量&lt;/div&gt;&lt;div&gt;static inline void ____napi_schedule(struct softnet_data *sd,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;struct napi_struct *napi)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;&amp;nbsp; list_add_tail(&amp;amp;napi-&amp;gt;poll_list, &amp;amp;sd-&amp;gt;poll_list);&lt;/div&gt;&lt;div&gt;&amp;nbsp; __raise_softirq_irqoff(NET_RX_SOFTIRQ);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;将（从驱动的中断函数中传来的）napi_struct 变量，添加到 poll list，后者 attach 到这个CPU上的softnet_data&lt;/div&gt;&lt;div&gt;__raise_softirq_irqoff触发一个NET_RX_SOFTIRQ类型软中断。这会触发执行net_rx_action（如果没有正在执行），&lt;/div&gt;&lt;div&gt;后者是网络设备初始化的时候注册的.软中断处理函数net_rx_action会调用 NAPI的poll函数来收包。&lt;/div&gt;&lt;div&gt;&lt;div&gt;软中断将会在和硬中断相同的CPU上执行。这个CPU不仅处理这个硬中断，而且通 过NAPI处理接下来的软中断来收包。&lt;/div&gt;&lt;div&gt;但是Receive Packet Steering可以将软中断分给其他CPU&lt;/div&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="360" y="630" width="830" height="400" as="geometry" />
        </mxCell>
        <mxCell id="YTzWB60EVm3kckp8Hosf-3" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="300" y="540" as="sourcePoint" />
            <mxPoint x="362" y="355" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="YTzWB60EVm3kckp8Hosf-4" value="&lt;h3&gt;数据接收调优&lt;/h3&gt;&lt;div&gt;1. 中断合并（Interrupt coalescing）&lt;/div&gt;&lt;div&gt;中断合并会将多个中断事件放到一起，累积到一定阈值后才向 CPU 发起中断请求。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. 调整硬中断亲和性（IRQ affinities）&lt;/div&gt;&lt;div&gt;如果NIC支持RSS/multiqueue, 可以设置亲和性. 指定CPU处理哪个IRQS.&lt;/div&gt;&lt;div&gt;硬件中断/proc/interrupts, 软件中断/proc/softirqs&lt;/div&gt;&lt;div&gt;Set the IRQ affinity for IRQ 8 to CPU 0&lt;/div&gt;&lt;div&gt;echo 1 &amp;gt; /proc/irq/8/smp_affinity&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="360" y="1050" width="690" height="160" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
