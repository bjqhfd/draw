<mxfile host="app.diagrams.net" modified="2020-11-16T05:10:42.055Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36" etag="D4v9__b9Do8EIOhD1Bs3" version="13.9.8" type="github">
  <diagram id="1WSthCP1p7yNz_Qq4u5r" name="Page-1">
    <mxGraphModel dx="1449" dy="643" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-1" value="pilot/pkg/bootstrap/server.go&lt;br&gt;func NewServer(args *PilotArgs) (*Server, error) {&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; s := &amp;amp;Server{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; XDSServer:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;xds.NewDiscoveryServer(e, args.Plugins, args.PodName),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;s.initControllers(args)&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;s.initRegistryEventHandlers()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;}" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="80" y="80" width="460" height="180" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-2" value="pilot/pkg/xds/discovery.go&lt;br&gt;&lt;div&gt;func NewDiscoveryServer(env *model.Environment) *DiscoveryServer {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; out := &amp;amp;DiscoveryServer{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; Env:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;env,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; EndpointShardsByService: map[string]map[string]*EndpointShards{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; concurrentPushLimit:&amp;nbsp; &amp;nbsp; &amp;nbsp;make(chan struct{}, features.PushThrottle),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; pushChannel:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;make(chan *model.PushRequest, 10),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; pushQueue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;NewPushQueue(),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; adsClients:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; map[string]*Connection{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; },&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="640" y="40" width="410" height="200" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-3" value="pilot/pkg/bootstrap/server.go&lt;br&gt;&lt;div&gt;func (s *Server) initControllers(args *PilotArgs) error {&lt;/div&gt;&lt;div&gt;&amp;nbsp; s.initCertController(args)&lt;/div&gt;&lt;div&gt;&amp;nbsp; s.initConfigController(args)&lt;/div&gt;&lt;div&gt;&amp;nbsp; s.initServiceControllers(args)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="120" y="320" width="350" height="100" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-4" value="pilot/pkg/bootstrap/configcontroller.go&lt;br&gt;&lt;div&gt;func (s *Server) initConfigController(args *PilotArgs) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; meshConfig := s.environment.Mesh()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; if len(meshConfig.ConfigSources) &amp;gt; 0 {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.initConfigSources(args) // Using MCP for config.&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.initK8SConfigStore(args)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; aggregateConfigController, err := configaggregate.MakeCache(s.ConfigStores)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; s.configController = aggregateConfigController&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; s.environment.IstioConfigStore = model.MakeIstioStore(s.configController)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; s.addStartFunc(func(stop &amp;lt;-chan struct{}) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; go s.configController.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; return nil&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; })&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="560" y="320" width="450" height="260" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-5" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.25;entryDx=0;entryDy=0;" parent="1" target="hdn6pJ4XfOclm7P6a8ZE-2" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="540" y="165" as="sourcePoint" />
            <mxPoint x="590" y="115" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-6" value="" style="endArrow=classic;html=1;entryX=0.452;entryY=0;entryDx=0;entryDy=0;entryPerimeter=0;exitX=0.434;exitY=1.011;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="hdn6pJ4XfOclm7P6a8ZE-1" target="hdn6pJ4XfOclm7P6a8ZE-3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="282.5" y="300" as="sourcePoint" />
            <mxPoint x="337.5" y="280" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-7" value="" style="endArrow=classic;html=1;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="470" y="380" as="sourcePoint" />
            <mxPoint x="560" y="369" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-8" value="&lt;div&gt;pilot/pkg/bootstrap/configcontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) initK8SConfigStore(args *PilotArgs) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;configController, err := s.makeKubeConfigController(args)&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;s.ConfigStores = append(s.ConfigStores, configController)&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &lt;/span&gt;s.ConfigStores = append(s.ConfigStores, gateway.NewController(s.kubeClient, configController, args.RegistryOptions.KubeOptions))&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;s.initInprocessAnalysisController(args)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;s.initStatusController(args, features.EnableStatus)&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;s.XDSServer.InternalGen.Store = configController&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1090" y="110" width="430" height="210" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-9" value="" style="endArrow=classic;html=1;entryX=-0.008;entryY=0.33;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="hdn6pJ4XfOclm7P6a8ZE-8" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1010" y="350" as="sourcePoint" />
            <mxPoint x="1060" y="300" as="targetPoint" />
            <Array as="points">
              <mxPoint x="1030" y="330" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-10" value="&lt;div&gt;// 监听crd&lt;/div&gt;&lt;div&gt;pilot/pkg/bootstrap/configcontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) makeKubeConfigController(args *PilotArgs) model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c, err := crdclient.New(s.kubeClient,&amp;nbsp; buildLedger(args.RegistryOptions), args.Revision,&amp;nbsp; &amp;nbsp;args.RegistryOptions.KubeOptions)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1540" y="40" width="400" height="150" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-11" value="" style="endArrow=classic;html=1;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1510" y="120" as="sourcePoint" />
            <mxPoint x="1540" y="90" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-12" value="pilot/pkg/config/kube/crdclient/client.go&lt;br&gt;&lt;div&gt;func New(client kube.Client)model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; out := &amp;amp;Client{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; schemas:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;collections.PilotServiceApi,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; queue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.NewQueue(1 * time.Second),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; kinds:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;map[config.GroupVersionKind]*cacheHandler{},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; known := knownCRDs(client.Ext())&amp;nbsp; //get all crd&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; for _, s := range out.schemas.All() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; name := fmt.Sprintf(&quot;%s.%s&quot;, s.Resource().Plural(), s.Resource().Group())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; if _, f := known[name]; f {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; var i informers.GenericInformer&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if s.Resource().Group() == &quot;networking.x-k8s.io&quot; {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; i, err =&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;client.ServiceApisInformer().ForResource(s.Resource().GroupVersionResource())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; i, err = client.IstioInformer().ForResource(s.Resource().GroupVersionResource())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; out.kinds[s.Resource().GroupVersionKind()] = createCacheHandler(out, s, i)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;}&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1955" width="520" height="400" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-14" value="// 监听gateway&lt;br&gt;pilot/pkg/config/kube/gateway/controller.go&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;func NewController(client kubernetes.Interface, c&amp;nbsp; &amp;nbsp;model.ConfigStoreCache, options controller2.Options)&amp;nbsp; &amp;nbsp;model.ConfigStoreCache {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; return &amp;amp;controller{client, c, options.DomainSuffix}&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1560" y="240" width="330" height="180" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-15" value="" style="endArrow=classic;html=1;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1520" y="250" as="sourcePoint" />
            <mxPoint x="1560" y="252" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-16" value="&lt;div&gt;pilot/pkg/config/kube/gateway/controller.go&lt;/div&gt;&lt;div&gt;func (c controller) RegisterEventHandler(typ config.GroupVersionKind, handler func(config.Config, config.Config, model.Event)) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.cache.RegisterEventHandler(typ, func(prev, cur config.Config, event model.Event) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; handler(prev, cur, event)&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;})&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;func (c controller) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="2000" y="480" width="470" height="170" as="geometry" />
        </mxCell>
        <mxCell id="hdn6pJ4XfOclm7P6a8ZE-17" value="" style="endArrow=classic;html=1;entryX=0.048;entryY=-0.027;entryDx=0;entryDy=0;entryPerimeter=0;exitX=1;exitY=0.75;exitDx=0;exitDy=0;" parent="1" source="hdn6pJ4XfOclm7P6a8ZE-14" target="hdn6pJ4XfOclm7P6a8ZE-16" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1940" y="460" as="sourcePoint" />
            <mxPoint x="1990" y="410" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-1" value="&lt;div&gt;pilot/pkg/bootstrap/servicecontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) initServiceControllers(args *PilotArgs) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; serviceControllers := s.ServiceController()&lt;span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.initKubeRegistry(serviceControllers, args)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.serviceEntryStore = serviceentry.NewServiceDiscovery(s.configController,&amp;nbsp; &amp;nbsp; &amp;nbsp;s.environment.IstioConfigStore, s.XDSServer)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; serviceControllers.AddRegistry(s.serviceEntryStore)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; s.kubeRegistry.AppendWorkloadHandler(s.serviceEntryStore.WorkloadInstanceHandler)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.serviceEntryStore.AppendWorkloadHandler(s.kubeRegistry.WorkloadInstanceHandler)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; s.addStartFunc(func(stop &amp;lt;-chan struct{}) error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; go serviceControllers.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="160" y="640" width="490" height="280" as="geometry" />
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-2" value="" style="endArrow=classic;html=1;entryX=0.224;entryY=0;entryDx=0;entryDy=0;entryPerimeter=0;exitX=0.437;exitY=1.06;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="hdn6pJ4XfOclm7P6a8ZE-3" target="nB5sZIHavd1A4j-XCwEL-1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="270" y="560" as="sourcePoint" />
            <mxPoint x="320" y="510" as="targetPoint" />
            <Array as="points">
              <mxPoint x="270" y="590" />
              <mxPoint x="270" y="610" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-3" value="&lt;div&gt;pilot/pkg/bootstrap/servicecontroller.go&lt;/div&gt;&lt;div&gt;func (s *Server) initKubeRegistry(serviceControllers *aggregate.Controller, args *PilotArgs) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; args.RegistryOptions.KubeOptions.ClusterID = s.clusterID&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; args.RegistryOptions.KubeOptions.Metrics = s.environment&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; args.RegistryOptions.KubeOptions.XDSUpdater = s.XDSServer&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; args.RegistryOptions.KubeOptions.NetworksWatcher = s.environment.NetworksWatcher&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; args.RegistryOptions.KubeOptions.SystemNamespace = args.Namespace&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; kubeRegistry := kubecontroller.NewController(s.kubeClient, args.RegistryOptions.KubeOptions)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; s.kubeRegistry = kubeRegistry&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; serviceControllers.AddRegistry(kubeRegistry) //kubeRegistry is kubecontroller&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="760" y="640" width="520" height="190" as="geometry" />
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-4" value="&lt;div&gt;pilot/pkg/serviceregistry/kube/controller/controller.go&lt;/div&gt;&lt;div&gt;func NewController(kubeClient kubelib.Client, options Options) *Controller {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c := &amp;amp;Controller{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; client:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; kubeClient.Kube(),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; queue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.NewQueue(1 * time.Second),&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; c.nsInformer = informers.NewSharedInformerFactoryWithOptions.Core().V1().Namespaces().Informer()&lt;span&gt;&amp;nbsp; &amp;nbsp;registerHandlers(c.nsInformer, c.queue, &quot;Namespaces&quot;, c.onNamespaceEvent, nil)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.serviceInformer = kubeClient.KubeInformer().Core().V1().Services().Informer()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.serviceLister = kubeClient.KubeInformer().Core().V1().Services().Lister()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.serviceInformer, c.queue, &quot;Services&quot;, c.onServiceEvent, nil)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.endpoints = newEndpointsController(c, kubeClient.KubeInformer().Core().V1().Endpoints())&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.endpoints = newEndpointSliceController(c,&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;&amp;nbsp; &amp;nbsp; kubeClient.KubeInformer().Discovery().V1beta1().EndpointSlices())&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.nodeInformer = kubeClient.KubeInformer().Core().V1().Nodes().Informer()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.nodeLister = kubeClient.KubeInformer().Core().V1().Nodes().Lister()&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.nodeInformer, c.queue, &quot;Nodes&quot;, c.onNodeEvent, nil)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.pods = newPodCache(c, kubeClient.KubeInformer().Core().V1().Pods(), func(key string) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; item, exists, err := c.endpoints.getInformer().GetStore().GetByKey(key)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; c.queue.Push(func() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return c.endpoints.onEvent(item, model.EventUpdate)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; registerHandlers(c.pods.informer, c.queue, &quot;Pods&quot;, c.pods.onEvent, nil)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1320" y="480" width="570" height="510" as="geometry" />
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-5" value="" style="endArrow=classic;html=1;entryX=-0.004;entryY=0.432;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="nB5sZIHavd1A4j-XCwEL-3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="650" y="720" as="sourcePoint" />
            <mxPoint x="700" y="670" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-6" value="" style="endArrow=classic;html=1;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1280" y="670" as="sourcePoint" />
            <mxPoint x="1320" y="672" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-7" value="&lt;div&gt;pilot/pkg/serviceregistry/kube/controller/controller.go&lt;/div&gt;&lt;div&gt;func registerHandlers(informer cache.SharedIndexInformer, q queue.Instance, otype string,&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; handler func(interface{}, model.Event)) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; wrappedHandler := func(obj interface{}, event model.Event) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; obj = tryGetLatestObject(informer, obj)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return handler(obj, event)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; informer.AddEventHandler(&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cache.ResourceEventHandlerFuncs{&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AddFunc: func(obj interface{}) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; incrementEvent(otype, &quot;add&quot;)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; q.Push(func() error {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return wrappedHandler(obj, model.EventAdd)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;})&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;},&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1960" y="660" width="510" height="290" as="geometry" />
        </mxCell>
        <mxCell id="nB5sZIHavd1A4j-XCwEL-8" value="" style="endArrow=classic;html=1;entryX=0.012;entryY=0.076;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" target="nB5sZIHavd1A4j-XCwEL-7" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1890" y="730" as="sourcePoint" />
            <mxPoint x="1940" y="732" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-1" value="pilot/pkg/queue/instance.go&lt;br&gt;&lt;div&gt;func (q *queueImpl) Push(item Task) {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; q.tasks = append(q.tasks, item)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="1930" y="980" width="340" height="120" as="geometry" />
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-2" value="pilot/pkg/serviceregistry/aggregate/controller.go&lt;br&gt;&lt;div&gt;func (c *Controller) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; for _, r := range c.GetRegistries() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; go r.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;lt;-stop&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="160" y="980" width="280" height="160" as="geometry" />
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-3" value="" style="endArrow=classic;html=1;entryX=0.192;entryY=0.004;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" target="x_8f15Q5pfNo6OUVc7Sv-2">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="414" y="920" as="sourcePoint" />
            <mxPoint x="464" y="950" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-4" value="pilot/pkg/serviceregistry/kube/controller/controller.go&lt;br&gt;&lt;div&gt;func (c *Controller) Run(stop &amp;lt;-chan struct{}) {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.networksWatcher.AddNetworksHandler(c.reloadNetworkLookup)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.reloadNetworkLookup()&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; go c.nsInformer.Run(stop)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; cache.WaitForCacheSync(stop, c.HasSynced)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; c.queue.Run(stop)&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="480" y="940" width="370" height="210" as="geometry" />
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-5" value="pkg/queue/instance.go&lt;br&gt;&lt;div&gt;func (q *queueImpl) Run() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; for {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; var task Task&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; task, q.tasks = q.tasks[0], q.tasks[1:]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; if err := task(); err != nil {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; time.AfterFunc(q.delay, func() {&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; q.Push(task)&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="920" y="910" width="360" height="220" as="geometry" />
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-6" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="440" y="1000" as="sourcePoint" />
            <mxPoint x="480" y="970" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-7" value="" style="endArrow=classic;html=1;entryX=-0.01;entryY=0.164;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" target="x_8f15Q5pfNo6OUVc7Sv-5">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="850" y="980" as="sourcePoint" />
            <mxPoint x="900" y="930" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-8" value="" style="endArrow=classic;html=1;entryX=0;entryY=0.204;entryDx=0;entryDy=0;entryPerimeter=0;exitX=0.994;exitY=0.449;exitDx=0;exitDy=0;exitPerimeter=0;" edge="1" parent="1" source="hdn6pJ4XfOclm7P6a8ZE-10" target="hdn6pJ4XfOclm7P6a8ZE-12">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1950" y="100" as="sourcePoint" />
            <mxPoint x="1990" y="60" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-9" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1980" y="940" as="sourcePoint" />
            <mxPoint x="1980" y="980" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="x_8f15Q5pfNo6OUVc7Sv-10" value="" style="endArrow=classic;html=1;" edge="1" parent="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1927" y="1020" as="sourcePoint" />
            <mxPoint x="1280" y="1019.5" as="targetPoint" />
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
